name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest

    # if you’re also using Applitools
    env:
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}

    steps:
      # 1) Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0

      # 2) Start an Nx Cloud CI run (for distributed caching & logs)
      - name: Start Nx Cloud
        run: |
          npx nx-cloud start-ci-run \
            --distribute-on="3 linux-medium-js" \
            --stop-agents-after="e2e-ci"

      # 3) Setup Node + cache npm
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # 4) Install dependencies
      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      # 5) Install Playwright’s browser binaries
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # 6) Record SHAs for Nx Cloud
      - name: Record SHAs for Nx Cloud
        uses: nrwl/nx-set-shas@v4

      # 7) Lint + Build (skip unit tests)
      - name: Lint & Build
        run: |
          npx nx affected \
            --target=lint \
            --target=build \
            --all

      # 8) Run E2E (headed under Xvfb so it won’t fail on Ubuntu)
      - name: Run E2E tests
        run: |
          # start your app in the background
          npm run start &

          # wait until the dev server is ready
          npx wait-on http://localhost:4200

          # wrap the Playwright CLI in xvfb
          xvfb-run --auto-servernum --server-args="-screen 0 1280x720x24" \
            npx nx affected \
              --target=e2e \
              --all \
              --parallel=1

      # 9) Stop Nx Cloud run when everything’s done
      - name: Stop Nx Cloud
        if: always()
        run: npx nx-cloud stop-ci-run
